@model DTNL.LL.Website.Models.ProjectDTO

@{
    ViewData["Title"] = "Create new project";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Create a new project</h1>
<h3>@ViewBag.ErrorMessage</h3>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />
    <h5>Basic</h5>
    <div class="form-group">
        Project name
        <div class="col-md-10">
            @Html.EditorFor(model => model.ProjectName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ProjectName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        Customer name
        <div class="col-md-10">
            @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        Is it active?
        <div class="col-md-10">
            @Html.EditorFor(model => model.Active, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Active, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        Have time range?
        <div class="col-md-10">
            @Html.EditorFor(model => model.HasTimeRange, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.HasTimeRange, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        Time range start
        <div class="col-md-10">
            @Html.EditorFor(model => model.TimeRangeStart, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.TimeRangeStart, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        Time range end
        <div class="col-md-10">
            @Html.EditorFor(model => model.TimeRangeEnd, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.TimeRangeEnd)
        </div>
    </div>
    
    <h5>Light settings</h5>
    <a href="https://api.developer.lifx.com/docs/colors" target="_blank">How to know which color format to use</a>
    <div class="form-group">
        Low Traffic Color
        <div class="col-md-10">
            @Html.EditorFor(model => model.LowTrafficColor, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.LowTrafficColor, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        Low Traffic Brightness
        <div class="col-md-10">
            @Html.EditorFor(model => model.LowTrafficBrightness, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.LowTrafficBrightness, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        Medium Traffic Color
        <div class="col-md-10">
            @Html.EditorFor(model => model.MediumTrafficColor, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MediumTrafficColor, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        Medium Traffic Brightness
        <div class="col-md-10">
            @Html.EditorFor(model => model.MediumTrafficBrightness, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MediumTrafficBrightness, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        High Traffic Color
        <div class="col-md-10">
            @Html.EditorFor(model => model.HighTrafficColor, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.HighTrafficColor, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        High Traffic Brightness
        <div class="col-md-10">
            @Html.EditorFor(model => model.HighTrafficBrightness, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.HighTrafficBrightness, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        Conversion Color
        <div class="col-md-10">
            @Html.EditorFor(model => model.ConversionColor, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ConversionColor, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        Conversion Cycle
        <div class="col-md-10">
            @Html.EditorFor(model => model.ConversionCycle, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ConversionCycle, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        Conversion Period
        <div class="col-md-10">
            @Html.EditorFor(model => model.ConversionPeriod, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ConversionPeriod, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
}

