@using Newtonsoft.Json
@model DTNL.LL.Website.Models.AllLights

@{
    ViewData["Title"] = "Create a Light";
    ViewBag.Light = "LIFX";

}

<h1>Create a new light</h1>
<h3>@ViewBag.ErrorMessage</h3>


@Html.DropDownList("model => model.Lights",
    new SelectList(new[]
    {
        new { Value = "LIFX", Text = "LIFX" },
        new { Value = "other", Text = "other" },
    },
        "Value",
        "Text",
        Model
        ),
    new { htmlAttributes = new { id = "change_form_dropdown", onchange = "openCity()" } })

@using (Html.BeginForm())
{
    <div>
        @Html.AntiForgeryToken()

        <div id="LIFX" class="tabcontent">
            <div class="form-group">
                Light Group Name
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LifxLightDto.LightGroupName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LifxLightDto.LightGroupName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                Time Range Enabled?
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LifxLightDto.TimeRangeEnabled, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LifxLightDto.TimeRangeEnabled, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                Time Range Start
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LifxLightDto.TimeRangeStart, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LifxLightDto.TimeRangeStart, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                Time Range End
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LifxLightDto.TimeRangeEnd, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LifxLightDto.TimeRangeEnd, "", new { @class = "text-danger" })
                </div>
            </div>
            <hr />
            <div class="form-group">
                Medium Traffic Amount
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LifxLightDto.MediumTrafficAmount, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LifxLightDto.MediumTrafficAmount, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                High Traffic Amount
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LifxLightDto.HighTrafficAmount, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LifxLightDto.HighTrafficAmount, "", new { @class = "text-danger" })
                </div>
            </div>
            <hr />
            <div class="form-group">
                Low Traffic Color
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LifxLightDto.LowTrafficColor, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LifxLightDto.LowTrafficColor, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                Low Traffic Brightness
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LifxLightDto.LowTrafficBrightness, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LifxLightDto.LowTrafficBrightness, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                Medium Traffic Color
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LifxLightDto.MediumTrafficColor, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LifxLightDto.MediumTrafficColor, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                Medium Traffic Brightness
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LifxLightDto.MediumTrafficBrightness, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LifxLightDto.MediumTrafficBrightness, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                High Traffic Color
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LifxLightDto.HighTrafficColor, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LifxLightDto.HighTrafficColor, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                High Traffic Brightness
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LifxLightDto.HighTrafficBrightness, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LifxLightDto.HighTrafficBrightness, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                Conversion Color
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LifxLightDto.ConversionColor, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LifxLightDto.ConversionColor, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                Conversion Cycle
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LifxLightDto.ConversionCycle, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LifxLightDto.ConversionCycle, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                Conversion Period
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LifxLightDto.ConversionPeriod, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LifxLightDto.ConversionPeriod, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div id="Other" class="tabcontent" style="display: none">
            Other
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create Light" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<script>

    function openCity() {
        var dropdown_element = document.getElementById("change_form_dropdown");
        var lightName = dropdown_element.options[dropdown_element.selectedIndex].value;

        // Declare all variables
        var i, tabcontent;

        // Get all elements with class="tabcontent" and hide them
        tabcontent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }

        // Show the current tab, and add an "active" class to the button that opened the tab
        document.getElementById(lightName).style.display = "block";
        //evt.currentTarget.className += " active";
    }
</script>
